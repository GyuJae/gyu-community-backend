// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  name         String        @unique
  password     String
  role         Role          @default(USER)
  posts        Post[]
  likes        Like[]
  comments     Comment[]
  commentLikes CommentLike[]
}

model Post {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  title      String    @db.VarChar(255)
  content    String
  file       String[]
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  likes      Like[]
  comments   Comment[]
  category   Category  @relation(references: [id], fields: [categoryId])
  categoryId Int
}

model Like {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId])
}

model Comment {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  payload      String        @db.VarChar(255)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       Int
  postId       Int
  commentLikes CommentLike[]
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([commentId, userId])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}
